printf("data: %d\n", *(int *)data);
	printf("head: %d\n", *(int *)queue->head->data);
	if (queue == NULL || data == NULL)
	{
		return -1;
	}
	/* TODO Phase 1 */
	int counter = 0;
	struct queueNode *currentItem = queue->head;
	if (currentItem != NULL && currentItem->data == data)
	{
		queue->head = currentItem->next;
		free(currentItem);
		if (queue->head == NULL)
			queue->tail = NULL;
	}
	else
	{
		while (counter < queue->queueLen)
		{
			printf("this int: %d\n", *(int *)currentItem->data);
			if (currentItem->next->data == data)
			{
				printf("I'm here in Q.c\n");
				printf("this int: %d\n", *(int *)currentItem->data);
				queue->queueLen = queue->queueLen - 1;
				// store to free later
				struct queueNode *targetNode = currentItem->next;
				// assign current node to the node after the target
				currentItem->next = currentItem->next->next;
				if (currentItem->next == NULL)
				{
					queue->tail = currentItem;
				}
				free(targetNode);
				printf("I'm here at end of Q.c\n");
				printf("this int: %d\n", *(int *)currentItem->data);
				printf("next int: %d\n", *(int *)currentItem->next->data);
				printf("next int: %d\n", *(int *)currentItem->next->next->data);
				struct queueNode *current = queue->head;
				for (int i = 0; i < queue->queueLen; i++)
				{
					printf("current int: %d\n", *(int *)current->data);
					current = current->next;
				}
				return 0;
			}
			currentItem = currentItem->next;
			counter++;
		}
	}
	return -1;